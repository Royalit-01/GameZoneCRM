const Order = require('../models/Order');
const { v4: uuidv4 } = require('uuid');

// Get all orders or by status
exports.getOrders = async (req, res) => {
  try {
    // console.log("working");
    
    const status = '';
    const query = status ? { status } : {};
    // const orders = await Order.find(query).populate('customer', 'name contact');
    const orders = await Order.find();
    res.json(orders);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Create new order
exports.createOrder = async (req, res) => {

  try {
    const { customerName, phone, items, screenNumber } = req.body;

    if ( !customerName || !phone || !items || !items.length) {
      return res.status(400).json({ message: "Missing required fields" });
    }
    
    let total = 0;
    // console.log(items);
    
    items.map((item) => {
      total += (item.snackPrice * item.snackQuantity);
    })
    const order = new Order({
      customerName,
      phone,
      screenNumber,
      items,
      totalPrice : total
      // orderId auto-generated by schema default
    });

    await order.save();
    res.status(201).json(order);
  } catch (error) {
    console.error(error);
    // Handle duplicate orderId errors and validation errors
    if (error.code === 11000) {
      return res.status(400).json({ message: 'Duplicate orderId, please try again' });
    }
    res.status(500).json({ message: error.message });
  }
};

// Move order from Pending to Cooking
exports.startCooking = async (req, res) => {
  try {
    const order = await Order.findOne({ orderId: req.params.orderId });
    // console.log(order);

    if (!order) return res.status(404).json({ message: 'Order not found' });

    if (order.status !== 'Pending')
      return res.status(400).json({ message: 'Order status must be Pending to start cooking' });

    order.status = 'Cooking';

    await order.save();

    res.json(order);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Move order from Cooking to Prepared
exports.markPrepared = async (req, res) => {
  try {
    const order = await Order.findOne({ orderId: req.params.orderId });
    if (!order) return res.status(404).json({ message: 'Order not found' });

    if (order.status !== 'Cooking')
      return res.status(400).json({ message: 'Order status must be Cooking to mark as prepared' });

    order.status = 'Prepared';
    await order.save();
    res.json(order);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// Delete order (clear after served)
exports.deleteOrder = async (req, res) => {
  try {
    const order = await Order.findOneAndDelete({ orderId: req.params.orderId });
    if (!order) return res.status(404).json({ message: 'Order not found' });

    res.status(204).send();
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};
